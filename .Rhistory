## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cache data")
return(m)
}
matrix <-x$get
m <- solve (matrix, ...)
x$setmatrix(m)
## Return a matrix that is the inverse of 'x'
m
}
j <- makeCacheMatrix(1:4,2,2)
j <- makeCacheMatrix(1:4,2,2)
j <- makeCacheMatrix(1:4)
j
j
j <- makeCacheMatrix(1:4)
j$get()
J$getmatrix()
j <- makeCacheMatrix(1:4,2,2)
?matrix
j <- makeCacheMatrix(matrix = 1:4,2,2)
a <- makeCacheMatrix(matrix(c(1:4), nrow = 2, ncol = 2) );
a$get
makeCacheMatrix(a)
a
a <- makeCacheMatrix()
a
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- solve
getmatrix <- function() m
list (set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix(), ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cache data")
return(m)
}
matrix <-x$get()
m <- solve (matrix, ...)
x$setmatrix(m)
## Return a matrix that is the inverse of 'x'
m
}
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
a
a$set
cacheSolve(a)
a$set(matrix(c(1,3,2,4),2,2))
cacheSolve(a)
a$set(matrix(c(1,2,12,13),2,2))
cacheSolve(a)
cacheSolve(a)
